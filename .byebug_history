c
meals.map(&:total_macros)
meals.flat_map(&:food_items)
meals
c
item
sum
c
food_items.sum {|item| item.calories * 2}
food_items.sum(:calories)
food_items.sum {|item| item.calories * item.servings}
food_items
c
meal.as_json.merge(total_macros: meal.total_macros)
meal.total_macros
meal.as_json
meal
c
@current_user.build_macro_goal(macro_goal_params)
@current_user.macro_goal.new(macro_goal_params)
c
n
@current_user.macro_goal.create(macro_goal_params)
@current_user.macro_goal.new(macro_goal_params)
@current_user.macro_goal
@current_user.macro_gaol
@current_user
@current.user
c
n
total
n
total.to_i
n
self.servings * self.protein
self.protein
self.servings
n
c
cv
x
nx
n
c
n
self.total_protein
self.quantity * self.total_protein
self.quantity
self
c
@current_user.setts.new
@current_user.setts
@current_user.stts
@current_user
@sett
c
@workout_plan.update(workout_plan_exercises_attributes:{"exercise_id": "21"}) 
@workout_plan.update(workout_plan_exercises_attributes:{"exercise_id": 21}) 
@workout_plan.update(workout_plan_exercises_attributes:"Chest") 
@workout_plan
@workout_plan.save!
@workout_plan.save
@workout_plan
n
@workout_plan
@workout_plan.save
n
@current_user.workout_plans.build(workout_plan_params)
@current_user.workout_plans
@current_user
c
@current_user.workout_plans.build(workout_plan_params)
c
@current_user.workout_plans.build(workout_plan_params)
@current_user.workout_plans
@current_user
c
n
c
find_muscles(*ex[:secondary]).name
find_muscles(*ex[:secondary]).mname
find_muscles(*ex[:secondary])
ex[:secondary]
Muscle.where(name: ["Anterior Deltoid", "Triceps Brachii"])
find_muscles(*ex[:secondary])
ex[:secondary]
*ex[:secondary]
ex[:primary]
ex[:muscle_group]
ex
c
n
ex[:secondary].map { |m| find_muscle(m).name }
ex[:secondary]
find_muscle("Anterior Deltoid")
find_muscle(Anterior Deltoid)
ex[:secondary]
find_muscle(ex[:primary])
ex[:primary]
find_muscle_group(ex[:muscle_group])
ex[:muscle_group]
ex[:name]
ex
c
n
JsonWebToken.encode(user_id: user.id)
n
user.id
user_id
n
user
user&.authenticate(params[:password])
n
c
params
user&.authenticate(params[:password])
n
User.find_by(email: params[:email])
c
n
User.find_by(email: params[:email])
c
user
c
user&.authenticate(params[:password])
n
User.find_by(email: params[:email])
params
c
n
user
c
user.save
n
user
c
user
c
request.headers['Authorization']
c
n
token
n
header
n
request.headers['Authorization']
request.headers
params
